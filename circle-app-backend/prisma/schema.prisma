// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int     @id @default(autoincrement())
  fullname      String
  email         String  @unique
  password      String
  username      String? @unique
  bio           String?
  profilePhoto  String?

  role RoleEnum @default(MEMBER)

  threads Thread[]
  replies Reply[]
  likes Like[]

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("users")
}

enum RoleEnum {
  ADMIN
  MEMBER
}

model Thread {
  id Int @id @default(autoincrement())
  content String
  image String?

  author User @relation(fields: [authorId], references: [id])
  authorId Int

  replies Reply[]
  like Like[]

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("threads")
}

model Reply {
  id Int @id @default(autoincrement())
  content String
  image String?

  author User @relation(fields: [authorId], references: [id])
  authorId Int

  thread Thread @relation(fields: [threadId], references: [id])
  threadId Int

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("replies")
}

model Like {
  id Int @id @default(autoincrement())

  author User @relation(fields: [authorId], references: [id])
  authorId Int

  thread Thread @relation(fields: [threadId], references: [id])
  threadId Int

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("likes")
}